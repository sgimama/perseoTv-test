{"ast":null,"code":"import axios from \"axios\";\nimport Config from '../config/Config';\nconst ApiRequest = {\n  Session: {\n    Login: params => {\n      return async dispatch => {\n        let res = null;\n\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.LOGIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          });\n\n          if (res.data.authorized && !res.data.error) {\n            console.log('correcto');\n          }\n\n          dispatch({\n            type: Config.ApiRequest.actionsTypes.LOGIN,\n            data: {\n              token: res.data.token\n            }\n          });\n        } catch (e) {\n          console.log(e);\n        } finally {\n          console.log(res);\n        }\n      };\n    }\n  },\n  Peine: {\n    Main: params => {\n      return async dispatch => {\n        let res = null;\n        let res1 = [];\n\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.MAIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          });\n          res.data.contents.map(content => {\n            let newContent = {};\n\n            if (!res.data.user.favs.indexOf(content.id)) {\n              console.log(content.id);\n              newContent = { ...content,\n                fav: true\n              };\n            } else {\n              newContent = { ...content,\n                fav: false\n              };\n            }\n\n            res1.push(newContent);\n          });\n          console.log(res1);\n        } catch (e) {\n          console.log(e);\n        } finally {\n          dispatch({\n            type: Config.ApiRequest.actionsTypes.INIT_MAIN,\n            data: {\n              user: {\n                name: res.data.user.name,\n                avatar: res.data.user.avatar,\n                favs: res.data.user.favs\n              },\n              contents: res.data.contents\n            }\n          });\n          console.log(res.data);\n          return res.data.user;\n        }\n      };\n    },\n    Player: params => {\n      return async dispatch => {\n        let res = null;\n\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.PLAYER}`, params, {\n            headers: Config.ApiRequest.request.headers\n          });\n        } catch (e) {\n          console.log(e);\n        } finally {\n          return res.data.url;\n        }\n      };\n    }\n  }\n};\nexport default ApiRequest;","map":{"version":3,"sources":["/Users/sergiogimenez/Documents/prueba/perseo-tv/src/services/api/Api-request.js"],"names":["axios","Config","ApiRequest","Session","Login","params","dispatch","res","post","request","baseURL","urls","LOGIN","headers","data","authorized","error","console","log","type","actionsTypes","token","e","Peine","Main","res1","MAIN","contents","map","content","newContent","user","favs","indexOf","id","fav","push","INIT_MAIN","name","avatar","Player","PLAYER","url"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport Config from '../config/Config';\n\nconst ApiRequest = {\n  Session: {\n    Login: (params) => {\n      return async (dispatch) => {\n      let res = null;\n      try {\n        res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.LOGIN}`, params, {\n          headers: Config.ApiRequest.request.headers\n        })\n\n        if(res.data.authorized && !res.data.error){\n          console.log('correcto');\n        }\n\n        dispatch({\n          type: Config.ApiRequest.actionsTypes.LOGIN,\n          data: {\n            token: res.data.token\n          }\n        });\n        \n      } catch (e) {\n        console.log(e);\n      } finally {\n        console.log(res);\n      }\n    }\n    }\n  },\n  Peine: {\n    Main: (params) => {\n      return async (dispatch) => {\n        let res = null;\n        let res1 = [];\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.MAIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          })\n\n\n          res.data.contents.map(content => {\n            let newContent = {};\n            if(!res.data.user.favs.indexOf(content.id)){\n              console.log(content.id)\n              newContent = {\n                ...content,\n                fav: true\n              }\n            }else{\n              newContent = {\n                ...content,\n                fav: false\n              }      \n            }\n            res1.push(newContent)\n          })\n          console.log(res1)\n\n        } catch (e) {\n          console.log(e);\n        } finally {\n          dispatch({\n            type: Config.ApiRequest.actionsTypes.INIT_MAIN,\n            data: {\n              user: {\n                name: res.data.user.name,\n                avatar: res.data.user.avatar,\n                favs: res.data.user.favs\n              },\n              contents: res.data.contents\n            }\n          });\n          console.log(res.data)\n          return res.data.user;\n        }\n      }\n    },\n    Player: (params) => {\n      return async (dispatch) => {\n        let res = null;\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.PLAYER}`, params, {\n            headers: Config.ApiRequest.request.headers\n          })\n          \n\n        } catch (e) {\n          console.log(e);\n        } finally {\n        \n          return res.data.url;\n        }\n      }\n    }\n  }\n}\n\nexport default ApiRequest;"]},"metadata":{},"sourceType":"module"}