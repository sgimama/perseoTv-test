{"ast":null,"code":"import axios from \"axios\";\nimport Config from '../config/Config';\nconst ApiRequest = {\n  Session: {\n    Login: params => {\n      return async dispatch => {\n        let res = null;\n\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.LOGIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          });\n        } catch (e) {\n          console.log(e);\n        } finally {\n          if (res.data.authorized && !res.data.error) {\n            dispatch({\n              type: Config.ApiRequest.actionsTypes.LOGIN,\n              data: {\n                token: res.data.token\n              }\n            });\n          } else {\n            dispatch({\n              type: Config.ApiRequest.actionsTypes.LOGIN_ERROR,\n              data: res.data\n            });\n          }\n        }\n      };\n    }\n  },\n  App: {\n    Main: params => {\n      return async dispatch => {\n        let res = null;\n        let contentsFavs = [];\n\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.MAIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          });\n          res.data.contents.map(content => {\n            let newContent = {};\n\n            if (!res.data.user.favs.indexOf(content.id)) {\n              console.log(content.id);\n              newContent = { ...content,\n                fav: true\n              };\n            } else {\n              newContent = { ...content,\n                fav: false\n              };\n            }\n\n            contentsFavs.push(newContent);\n          });\n        } catch (e) {\n          console.log(e);\n        } finally {\n          dispatch({\n            type: Config.ApiRequest.actionsTypes.INIT_MAIN,\n            data: {\n              user: {\n                name: res.data.user.name,\n                avatar: res.data.user.avatar\n              },\n              contents: contentsFavs\n            }\n          });\n          console.log(res.data);\n          return res.data.user;\n        }\n      };\n    },\n    Player: params => {\n      return async dispatch => {\n        let res = null;\n\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.PLAYER}`, params, {\n            headers: Config.ApiRequest.request.headers\n          });\n        } catch (e) {\n          console.log(e);\n        } finally {\n          return res.data.url;\n        }\n      };\n    }\n  }\n};\nexport default ApiRequest;","map":{"version":3,"sources":["/Users/sergiogimenez/Documents/prueba/perseo-tv/src/services/api/Api-request.js"],"names":["axios","Config","ApiRequest","Session","Login","params","dispatch","res","post","request","baseURL","urls","LOGIN","headers","e","console","log","data","authorized","error","type","actionsTypes","token","LOGIN_ERROR","App","Main","contentsFavs","MAIN","contents","map","content","newContent","user","favs","indexOf","id","fav","push","INIT_MAIN","name","avatar","Player","PLAYER","url"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport Config from '../config/Config';\n\nconst ApiRequest = {\n  Session: {\n    Login: (params) => {\n      return async (dispatch) => {\n        let res = null;\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.LOGIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          })\n\n        } catch (e) {\n          console.log(e);\n        } finally {\n          if (res.data.authorized && !res.data.error) {\n            dispatch({\n              type: Config.ApiRequest.actionsTypes.LOGIN,\n              data: {\n                token: res.data.token\n              }\n            });\n          } else {\n            dispatch({\n              type: Config.ApiRequest.actionsTypes.LOGIN_ERROR,\n              data: res.data\n            });\n          }\n        }\n      }\n    }\n  },\n  App: {\n    Main: (params) => {\n      return async (dispatch) => {\n        let res = null;\n        let contentsFavs = [];\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.MAIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          })\n\n\n          res.data.contents.map(content => {\n            let newContent = {};\n            if (!res.data.user.favs.indexOf(content.id)) {\n              console.log(content.id)\n              newContent = {\n                ...content,\n                fav: true\n              }\n            } else {\n              newContent = {\n                ...content,\n                fav: false\n              }\n            }\n            contentsFavs.push(newContent)\n          })\n        } catch (e) {\n          console.log(e);\n        } finally {\n          dispatch({\n            type: Config.ApiRequest.actionsTypes.INIT_MAIN,\n            data: {\n              user: {\n                name: res.data.user.name,\n                avatar: res.data.user.avatar\n              },\n              contents: contentsFavs\n            }\n          });\n          console.log(res.data)\n          return res.data.user;\n        }\n      }\n    },\n    Player: (params) => {\n      return async (dispatch) => {\n        let res = null;\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.PLAYER}`, params, {\n            headers: Config.ApiRequest.request.headers\n          })\n\n\n        } catch (e) {\n          console.log(e);\n        } finally {\n\n          return res.data.url;\n        }\n      }\n    }\n  }\n}\n\nexport default ApiRequest;"]},"metadata":{},"sourceType":"module"}