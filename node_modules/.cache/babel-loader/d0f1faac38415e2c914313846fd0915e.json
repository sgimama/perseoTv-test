{"ast":null,"code":"import axios from \"axios\";\nimport Config from '../config/Config';\nconst ApiRequest = {\n  Session: {\n    Login: params => {\n      return async dispatch => {\n        setLoading(Config.ApiRequest.actionsTypes.LOADING, dispatch);\n        let res = null;\n\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.LOGIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          });\n        } catch (e) {\n          console.log(e);\n        } finally {\n          if (res.data.authorized && !res.data.error) {\n            dispatch({\n              type: Config.ApiRequest.actionsTypes.LOGIN,\n              data: {\n                token: res.data.token\n              }\n            });\n          } else {\n            dispatch({\n              type: Config.ApiRequest.actionsTypes.LOGIN_ERROR,\n              data: res.data\n            });\n          }\n        }\n      };\n    }\n  },\n  App: {\n    Main: params => {\n      return async dispatch => {\n        setLoading(Config.ApiRequest.actionsTypes.LOADING, dispatch);\n        let res = null;\n        let contentsFavs = [];\n\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.MAIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          });\n          res.data.contents.map(content => {\n            let newContent = {};\n\n            if (!res.data.user.favs.indexOf(content.id)) {\n              newContent = { ...content,\n                fav: true\n              };\n            } else {\n              newContent = { ...content,\n                fav: false\n              };\n            }\n\n            contentsFavs.push(newContent);\n          });\n        } catch (e) {\n          console.log(e);\n        } finally {\n          dispatch({\n            type: Config.ApiRequest.actionsTypes.INIT_MAIN,\n            data: {\n              user: {\n                name: res.data.user.name,\n                avatar: res.data.user.avatar\n              },\n              contents: contentsFavs\n            }\n          });\n          return res.data;\n        }\n      };\n    },\n    Player: params => {\n      return async dispatch => {\n        setLoading(Config.ApiRequest.actionsTypes.LOADING, dispatch);\n        let res = null;\n\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.PLAYER}`, params, {\n            headers: Config.ApiRequest.request.headers\n          });\n        } catch (e) {\n          console.log(e);\n        } finally {\n          return res.data.url;\n        }\n      };\n    },\n    Favorite: params => {\n      return async dispatch => {\n        console.log(dispatch);\n        dispatch({\n          type: Config.ApiRequest.actionsTypes.FAVORITE,\n          data: {\n            id: params.id,\n            action: params.fav\n          }\n        });\n      };\n    },\n    Search: params => {\n      return async () => {\n        let s = 'sd';\n      };\n    }\n  }\n};\n\nconst setLoading = (action, dispatch) => {\n  dispatch({\n    type: action,\n    data: {\n      loading: true\n    }\n  });\n};\n\nexport default ApiRequest;","map":{"version":3,"sources":["/Users/sergiogimenez/Documents/prueba/perseo-tv/src/services/api/Api-request.js"],"names":["axios","Config","ApiRequest","Session","Login","params","dispatch","setLoading","actionsTypes","LOADING","res","post","request","baseURL","urls","LOGIN","headers","e","console","log","data","authorized","error","type","token","LOGIN_ERROR","App","Main","contentsFavs","MAIN","contents","map","content","newContent","user","favs","indexOf","id","fav","push","INIT_MAIN","name","avatar","Player","PLAYER","url","Favorite","FAVORITE","action","Search","s","loading"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport Config from '../config/Config';\n\nconst ApiRequest = {\n  Session: {\n    Login: (params) => {\n      return async (dispatch) => {\n        setLoading(Config.ApiRequest.actionsTypes.LOADING, dispatch);\n        let res = null;\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.LOGIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          })\n\n        } catch (e) {\n          console.log(e);\n        } finally {\n          if (res.data.authorized && !res.data.error) {\n            dispatch({\n              type: Config.ApiRequest.actionsTypes.LOGIN,\n              data: {\n                token: res.data.token\n              }\n            });\n          } else {\n            dispatch({\n              type: Config.ApiRequest.actionsTypes.LOGIN_ERROR,\n              data: res.data\n            });\n          }\n        }\n      }\n    }\n  },\n  App: {\n    Main: (params) => {\n      return async (dispatch) => {\n        setLoading(Config.ApiRequest.actionsTypes.LOADING, dispatch);\n        let res = null;\n        let contentsFavs = [];\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.MAIN}`, params, {\n            headers: Config.ApiRequest.request.headers\n          })\n\n\n          res.data.contents.map(content => {\n            let newContent = {};\n            if (!res.data.user.favs.indexOf(content.id)) {\n              newContent = {\n                ...content,\n                fav: true\n              }\n            } else {\n              newContent = {\n                ...content,\n                fav: false\n              }\n            }\n            contentsFavs.push(newContent)\n          })\n        } catch (e) {\n          console.log(e);\n        } finally {\n          dispatch({\n            type: Config.ApiRequest.actionsTypes.INIT_MAIN,\n            data: {\n              user: {\n                name: res.data.user.name,\n                avatar: res.data.user.avatar\n              },\n              contents: contentsFavs\n            }\n          });\n          return res.data;\n        }\n      }\n    },\n    Player: (params) => {\n      return async (dispatch) => {\n        setLoading(Config.ApiRequest.actionsTypes.LOADING, dispatch);\n        let res = null;\n        try {\n          res = await axios.post(`${Config.ApiRequest.request.baseURL + Config.ApiRequest.urls.PLAYER}`, params, {\n            headers: Config.ApiRequest.request.headers\n          })\n        } catch (e) {\n          console.log(e);\n        } finally {\n          return res.data.url;\n        }\n      }\n    },\n    Favorite: (params) => {\n      return async (dispatch) => {\n      console.log(dispatch);\n\n      dispatch({\n        type: Config.ApiRequest.actionsTypes.FAVORITE,\n        data: {\n          id: params.id,\n          action: params.fav\n        }\n      });\n      }\n    },\n    Search: (params) => {\n      return async () => {\n        let s = 'sd';\n      }\n    }\n  }\n}\n\nconst setLoading = (action, dispatch) => {\n  dispatch({\n    type: action,\n    data: {\n      loading: true,\n    },\n  });\n};\n\nexport default ApiRequest;"]},"metadata":{},"sourceType":"module"}